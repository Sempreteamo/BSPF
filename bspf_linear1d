library(FKF)

####settings####
set.seed(456)
alpha = A = 0.42
cov = B = C = D = 1
N <- 1000 
Time <- 10
L = 2
X <- matrix(0, nrow = Time, ncol = N )#particles t horizontal; N vertical
X.replicate <- matrix(0, nrow = Time, ncol = N )
X_true <- vector()
obs <- vector()
w <- matrix(NA, nrow = Time, ncol = N ) #weight
kappa = 0.5
mu <- vector()
var <- vector()

####FKF####
dt <- ct <- 0
Tt <- as.matrix(A)
P0 <- Zt <- Ht <- Gt <- as.matrix(1)

####functions####
ESS <- function(n,w, is.log=FALSE){
  if(is.log) {
    mx <- max(w[n-1,])
    s <- sum(exp(w[n-1,]-mx))
    ess <- 1/sum((exp(w[n-1,]-mx)/s)^2)
  }else{
    s <- sum(w[n-1,])
    ess <- 1/sum((w[n-1,]/s)^2) 
  }
  return(ess)  
}

Obs <- function(){
  X_true[1] <- rnorm(1)   
  for(t in 2:Time){  #observations
    X_true[t] <- rnorm(1, X_true[t-1], 1)   #t(rnorm(d) + A%*%x)
  }
  return(rnorm(Time) + X_true)
}

Dist <- function(x, n, var, mu.replicate, fkf.mu, fkf.var, X){
  if(n <= L){
    #fkf*iteration
    fkf.ite.mu <- (fkf.mu*var[n-1] + mu.replicate*fkf.var)/(var[n-1] + fkf.var)  
    fkf.ite.var <- fkf.var*var[n-1]/(var[n-1] + fkf.var)
    
    #fkf*iter*f
    mean <- (fkf.ite.mu + A*x*fkf.ite.var)/(1 + fkf.ite.var)  
    Var <-  fkf.ite.var/(1 + fkf.ite.var)    
    return(list(mean = mean, Var = Var))  
  }else{
    if(L != 1){
      fkf.mu.2 <- fkf.mu[L]
      fkf.var.2 <- fkf.var[L]
      
      for(p in 1:(L-1)){
        #fkf*f
        fkf.f.mu <- (A*x*fkf.var[p] + fkf.mu[p])/(fkf.var[p] + 1)
        fkf.f.var <- fkf.var[p]/(fkf.var[p] + 1)
        
        #fkf*fkf*f
        fkf.mu.2 <- (fkf.mu.2*fkf.f.var + fkf.f.mu*fkf.var.2)/(fkf.f.var + fkf.var.2)
        fkf.var.2 <- fkf.f.var*fkf.var.2/(fkf.f.var + fkf.var.2)
      }
      return(list(mean = fkf.mu.2, Var = fkf.var.2))   
    }else{
      mean <- (A+1)*x/2    #f*g
      Var <- 1/2
      return(list(mean = mean, Var = Var))
    }
  }
}

#mu: mean=var=1
#f: mean=Ax, var=1
#g: mean=Cx, var=1

####bspf####
obs <- Obs()
X0 <-  rnorm(1)  

# n = 1
mu <- (1+X0)/2
var[L] <- 1/2
mu.replicate <- mu
X.replicate[L, ] <- rnorm(N, mu, var[L])
X <- X.replicate
a0 <- X0
fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:Time]))$logLik 
Z <- 0
fkf.mu <- vector()
fkf.var <- vector()
rc = 0
w[L,] <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$logLik

# n > 1
for(n in (L+1):Time){
  if(L < 1){
    warning("error('invalid parameter: L < 1')")
  }
  
  if(n <= L){
    
    fkf.mu <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:n]))$att[n]
    fkf.var <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:n]))$Ptt[n]
    
   
    mu <- Dist(X[n-1, ], n, var, mu.replicate, fkf.mu, fkf.var, X)$mean   #a lot of mu depend on each x, or one mu?
    var[n] <- Dist(X[n-1, ], n, var, mu.replicate, fkf.mu, fkf.var, X)$Var
      
    for(i in 1:N){
      X.replicate[1:n,i] <- rnorm(1, mu[i], var[n])
    }
      
    if(n == L){
      w[n,] <- exp(fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$logLik)
        
    }else{
      w[n,] <- w[n-1,]
    }
      
    X <- X.replicate
    mu.replicate <- mu
      
  }
  
  if(n > L){
    #a0 <- 
    
    
    fkf.mu <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[(n-L+1):n]))$att 
    fkf.var <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[(n-L+1):n]))$Ptt
    
    if(ESS(n,w, is.log = TRUE) <= kappa*N){
      rc = rc + 1
      
      w_ <- w[n-1,]/sum(w[n-1,])
      s <- sample(1:N, size=N, replace=TRUE, prob=w_)  
      
      mu <- Dist(X[n-1, s], n, var, mu.replicate, fkf.mu, fkf.var, X)$mean
      var[n] <- Dist(X[n-1, s], n, var, mu.replicate, fkf.mu, fkf.var, X)$Var
      
      mx <- max(w[n-1, ])
      Z = Z + log(mean(exp(w[n-1, ]-mx)))+mx
      
      for(i in 1:N){
        X.replicate[(n-L+1):n,i] <- rnorm(1, mu[i], var[n])
      }
      
      #weights
      if(L == 1){
        w[n,] = w[n-1,] + log((4*pi)^(-1/2)*exp((-1/2)*((A-1)*X.replicate[n-1,])^2/2) )
      }else{
        w[n,] = w[n-1,] +log((2*pi*(1/2 + fkf.var[L-1]))^(-1/2)*exp((-1/2)*(1/2 + fkf.var[L-1])^(-1)*((A+1)*X.replicate[n-1,]/2 - fkf.mu[L-1])^2))
        
      }
      
      X <- X.replicate
      mu.replicate <- mu
      
    }else{
      
      mu <- Dist(X[n-1, ], n, var, mu.replicate, fkf.mu, fkf.var, X)$mean   #a lot of mu depend on each x, or one mu?
      var[n] <- Dist(X[n-1, ], n, var, mu.replicate, fkf.mu, fkf.var, X)$Var
      
      for(i in 1:N){
        X.replicate[(n-L+1):n,i] <- rnorm(1, mu[i], var[n])
      }
      
      #weights
      if(L == 1){
        w[n,] = w[n-1,] +log((4*pi)^(-1/2)*exp((-1/2)*((A-1)*X.replicate[n-1,])^2/2))
      }else{
        w[n,] = w[n-1,] +log((2*pi*(1/2 + fkf.var[L-1]))^(-1/2)*exp((-1/2)*(1/2 + fkf.var[L-1])^(-1)*((A+1)*X.replicate[n-1,]/2 - fkf.mu[L-1])^2))
        
      } 
      
      X <- X.replicate
      mu.replicate <- mu
      
    }
  }
}
mx <- max(w[Time,])
Z <- Z + log(mean(exp(w[Time,]-mx)))+mx

rc
Z
exp(Z-fkf.obj)
