library(FKF)
set.seed(456)
N=50
Time = 1000
L = 2
A = 0.42
B = 1
C = 1
D = 0.3

X <- matrix(NA, Time, N)
X_ <- matrix(NA, Time, N)
w <- matrix(NA, Time, N)
X1 <- rnorm(1)
X_true <- vector()
obs <- vector()
kappa = 0.5
fkf.mu <- vector()
fkf.var <- vector()

dt <- ct <- 0
Tt <- as.matrix(A)
P0 <- Zt <- Ht <- Gt <- as.matrix(1)
a0 <- 0

ESS <- function(n,w, is.log=FALSE){
  if(is.log) {
    mx <- max(w[n-1,])
    s <- sum(exp(w[n-1,]-mx))
    ess <- 1/sum((exp(w[n-1,]-mx)/s)^2)
  }else{
    s <- sum(w[n-1,])
    ess <- 1/sum((w[n-1,]/s)^2) 
  }
  return(ess)  
}

Obs <- function(){
  X_true[1] <- rnorm(1)   
  for(t in 2:Time){  #observations
    X_true[t] <- rnorm(1) + A*X_true[t-1] 
  }
  return(rnorm(Time) + X_true)
}
obs <- Obs()
fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs))$logLik 

#n = L
Init <- function(){
  #X_1:L sample from q(x_1:L)=p(x_1:L|y_1:L)=p(x_L|y_1:L)*(from 1:n-1 p(x_p|y_1:p)*f)
  if(L == 1){
    X[1,] <-  rnorm(N, (C*obs[1]*D^2)/(D+C^2), sqrt(D/(D+C^2)))  #pass
   
    w[1,] <- log((2*pi*(1+D))^(-1/2)*exp((-1/2)*(obs[1])^2/(1+D)))  #pass
      
  }else{
    a0 <- 0
    fkf.mu <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$att
    fkf.var <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$Ptt
    X[L,] <- rnorm(N, fkf.mu[L], sqrt(fkf.var[L]))
    
    for(p in (L-1):1){
      for(i in 1:N){
        X[p,i] <- rnorm(1, (A*X[p+1,i]*fkf.var[p] + fkf.mu[p])/(A^2*fkf.var[p] + 1),sqrt(fkf.var[p]/(A^2*fkf.var[p] + 1)))
      } #pass
    }
    w[L,] <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$logLik  #pass
    
  }
  return(list(X=X, w=w))
}

X <- Init()$X
w <- Init()$w

Z = 0
re = 0
  for(n in (L+1):Time){
    print(n)
    if(ESS(n,w, is.log =  TRUE) <= kappa*N){
      re = re + 1
      mx <- max(w[n-1,])
      w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
      Z = Z + log(mean(exp(w[n-1,]-mx))) + mx
      s <- sample(1:N, size=N, replace=TRUE, prob=w_) 
        if(L == 1){
          
          for(i in 1:N){
            X[n,i] <- rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,s[i]]+obs[n]*B*C/(C^2*B+D))/2, sqrt((1-B*C^2/(C^2*B+D))*B))
              #rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,s[i]]+obs[n]*B*C/(C^2*B+D))/2, sqrt((1-B*C^2/(C^2*B+D))*B))
          }  #pass
          w[n,] = log((2*pi*(B^2+D^2))^(-1/2)*exp((-1/2)*(A*X[n-1,s]-obs[n])^2/(B^2+D^2))) 
            ##pass
          
        }else{
          for(i in 1:N){
            a0 <- A*X[n-L,s[i]]
            fkf.mu <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[(n-L+1):n]))$att 
            fkf.var <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[(n-L+1):n]))$Ptt 
            X[n,i] <- rnorm(1, fkf.mu[L], sqrt(fkf.var[L]))
            
            for(p in (n-1):(n-L+1)){
              X[p,i] <- rnorm(1, (A*X[p+1,s[i]]*fkf.var[p-n+L] + fkf.mu[p-n+L])/(A^2*fkf.var[p-n+L] + 1), sqrt(fkf.var[p-n+L]/(A^2*fkf.var[p-n+L] + 1)))
            } #pass
            
          }
          w[n,] <- dnorm(obs[n], A*fkf.mu[L-1], sqrt(B^2+D^2+A^2*fkf.var[L-1]), log = TRUE)  #pass
        }
      
    }else{
      if(L == 1){
        for(i in 1:N){
          X[n,i] <- rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,i]+obs[n]*B*C/(C^2*B+D)), sqrt((1-B*C^2/(C^2*B+D))*B))
            #rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,i]+obs[n]*B*C/(C^2*B+D)), sqrt((1-B*C^2/(C^2*B+D))*B))  #pass
            
          w[n,i] = w[n-1,i] + log((2*pi*(B^2+D^2))^(-1/2)*exp((-1/2)*(A*X[n-1,i]-obs[n])^2/(B^2+D^2)))
              #pass
        }
        
      }else{
        for(i in 1:N){
          a0 <- A*X[n-L,i]
          fkf.mu <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[(n-L+1):n]))$att 
          fkf.var <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[(n-L+1):n]))$Ptt 
          X[n,i] <- rnorm(1, fkf.mu[L], sqrt(fkf.var[L]))
          
          for(p in (n-1):(n-L+1)){
            X[p,i] <- rnorm(1, (A*X[p+1,i]*fkf.var[p-n+L] + fkf.mu[p-n+L])/(A^2*fkf.var[p-n+L] + 1), 
                             sqrt(fkf.var[p-n+L]/(A^2*fkf.var[p-n+L] + 1)))
          }  #pass
          
          w[n,i] = w[n-1,i] + dnorm(obs[n], A*fkf.mu[L-1], sqrt(B^2+D^2+A^2*fkf.var[L-1]), log = TRUE)  #pass
           
        }
      }
    }
  }

  mx <- max(w[Time,])
  Z <- Z + log(mean(exp(w[Time,]-mx))) + mx
  

print(re)
#X <- bspf()$X
#w <- bspf()$w
#Z <- bspf()$Z
exp(Z-fkf.obj)
